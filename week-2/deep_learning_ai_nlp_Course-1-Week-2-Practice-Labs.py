# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tniMz-MHuubHAInTR2We5YI1SgZvWfa4
"""

import pdb
from nltk.corpus import stopwords, twitter_samples
import numpy as np
import pandas as pd
import nltk
import string
from nltk.tokenize import TweetTokenizer
from os import getcwd
import unittest

nltk.download('twitter_samples')
nltk.download('stopwords')

# get the sets of positive and negative tweets
all_positive_tweets = twitter_samples.strings('positive_tweets.json')
all_negative_tweets = twitter_samples.strings('negative_tweets.json')

# split the data into two pieces, one for training and one for testing (validation set)
test_pos = all_positive_tweets[4000:]
train_pos = all_positive_tweets[:4000]
test_neg = all_negative_tweets[4000:]
train_neg = all_negative_tweets[:4000]

train_x = train_pos + train_neg
test_x = test_pos + test_neg

train_y = np.append(np.ones(len(train_pos)), np.zeros(len(train_neg)))
test_y = np.append(np.ones(len(test_pos)), np.zeros(len(test_neg)))

import re
import string
from nltk.corpus import stopwords
from nltk.tokenize import TweetTokenizer
from nltk.stem import PorterStemmer
def process_tweet(tweet):
    """Process tweet function.
    Input:
        tweet: a string containing a tweet
    Output:
        tweets_clean: a list of words containing the processed tweet

    """
    stemmer = PorterStemmer()
    stopwords_english = stopwords.words('english')
    # remove stock market tickers like $GE
    tweet = re.sub(r'\$\w*', '', tweet)
    # remove old style retweet text "RT"
    tweet = re.sub(r'^RT[\s]+', '', tweet)
    # remove hyperlinks
    tweet = re.sub(r'https?://[^\s\n\r]+', '', tweet)
    # remove hashtags
    # only removing the hash # sign from the word
    tweet = re.sub(r'#', '', tweet)
    # tokenize tweets
    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,
                               reduce_len=True)
    tweet_tokens = tokenizer.tokenize(tweet)

    tweets_clean = []
    for word in tweet_tokens:
        if (word not in stopwords_english and  # remove stopwords
                word not in string.punctuation):  # remove punctuation
            # tweets_clean.append(word)
            stem_word = stemmer.stem(word)  # stemming word
            tweets_clean.append(stem_word)

    return tweets_clean

custom_tweet = "RT @Twitter @chapagain Hello There! Have a great day. :) #good #morning http://chapagain.com.np"
#print clean tweet:
print(process_tweet(custom_tweet))

def count_tweets(result, tweets, ys):
  '''
  Input:
        result: a dictionary that will be used to map each pair to its frequency
        tweets: a list of tweets
        ys: a list corresponding to the sentiment of each tweet (either 0 or 1)
    Output:
        result: a dictionary mapping each pair to its frequency
  '''
  for y, tweet in zip(ys, tweets):
    for word in process_tweet(tweet):
      pair = (word, y)
      if pair in result:
        result[pair] += 1
      else:
        result[pair] = 1
  return result

result = {}
tweets = ['i am happy', 'i am tricked', 'i am sad', 'i am tired', 'i am tired']
ys = [1, 0, 0, 0, 0]
res = count_tweets(result, tweets, ys)
print(res)

# Build the freqs dictionary for later uses
freqs = count_tweets({}, train_x, train_y)

def lookup(freqs, word, label):
  '''
  Input:
      freqs: A dictionary with the frequency of occurrence of (word, label) pairs.
      word: The word to look up.
      label: The associated sentiment label (0 or 1).
  Output:
      count: The frequency count for that specific (word, label) pair.
  '''

  # Create the tuple key for dictionary lookup
  key = (word, label)

  # Check if the key exists in the frequency dictionary
  if key in freqs:
      # If the word-label pair exists, return its count
      return freqs[key]
  else:
      # If the word-label pair is NOT in the dictionary, return 0
      # This handles words not seen in the training data safely.
      return 0

def train_naive_bayes(freqs, train_x, train_y):
    '''
    Input:
        freqs: dictionary from (word, label) to how often the word appears
        train_x: a list of tweets
        train_y: a list of labels correponding to the tweets (0,1)
    Output:
        logprior: the log prior. (equation 3 above)
        loglikelihood: the log likelihood of you Naive bayes equation. (equation 6 above)
    '''
    loglikelihood = {}
    logprior = 0

    ### START CODE HERE ###

    # calculate V, the number of unique words in the vocabulary
    vocab = [key[0] for key in freqs.keys()]

    V = len(set(vocab))


    # calculate N_pos, N_neg, V_pos, V_neg
    N_pos = N_neg = 0

    for pair in freqs.keys():

        # if the label is positive (greater than zero)
        if pair[1] > 0:

            # Increment the number of positive words by the count for this (word, label) pair

            N_pos += freqs[pair]

        # else, the label is negative
        else:

            # increment the number of negative words by the count for this (word,label) pair
            N_neg += freqs[pair]

    # Calculate D, the number of documents

    D = len(train_y)


    # Calculate D_pos, the number of positive documents
    D_pos = len(list(filter(lambda x: x == 1, train_y)))

    # Calculate D_neg, the number of negative documents
    D_neg = len(list(filter(lambda x: x == 0, train_y)))

    # Calculate logprior
    logprior = np.log(D_pos/D_neg)


    # For each word in the vocabulary...
    for word in vocab:
        # get the positive and negative frequency of the word
        freq_pos = lookup(freqs,word,1)
        freq_neg = lookup(freqs,word,0)


        # calculate the probability that each word is positive, and negative
        p_w_pos = (freq_pos + 1) / (N_pos + V)
        p_w_neg = (freq_neg +1) / (N_neg + V)

        # calculate the log likelihood of the word
        loglikelihood[word] = np.log(p_w_pos/p_w_neg)


    ### END CODE HERE ###

    return logprior, loglikelihood

logprior, loglikelihood = train_naive_bayes(freqs, train_x, train_y)
print(logprior)
print(len(loglikelihood))
print(loglikelihood)

def naive_bayes_predict(tweet, logprior, loglikelihood):
  '''
    Input:
        tweet: a string
        logprior: a number
        loglikelihood: a dictionary of words mapping to numbers
    Output:
        p: the sum of all the logliklihoods of each word in the tweet (if found in the dictionary) + logprior (a number)

    '''
  # process the tweet to get a list of words
  word_l = process_tweet(tweet)

  # initialize probability to zero
  p = 0

  # add the logprior
  p += logprior

  for word in word_l :
    # check if the word exists in the loglikelihood dictionary
    if word in loglikelihood:
      # add the log likelihood of that word to the probability
      p += loglikelihood[word]

  return p

my_tweet = 'She smiled.'
p = naive_bayes_predict(my_tweet, logprior, loglikelihood)
print("The expected output is", p)

# Experiment with your own tweet.
my_tweet = 'He laughed.'
p = naive_bayes_predict(my_tweet, logprior, loglikelihood)
print('The expected output is', p)

def test_naive_base(test_x, test_y,logprior, loglikelihood, naive_bayes_predict=naive_bayes_predict):
  """
  Input:
        test_x: A list of tweets
        test_y: the corresponding labels for the list of tweets
        logprior: the logprior
        loglikelihood: a dictionary with the loglikelihoods for each word
    Output:
        accuracy: (# of tweets classified correctly)/(total # of tweets)
  """

  acuracy = 0
  y_hats = []
  for tweet in test_x:
    if naive_bayes_predict(tweet, logprior, loglikelihood) > 0:
      # if the prediction is > 0
      y_hat_i = 1
    else:
      # otherwise the predicted class is 0
      y_hat_i = 0

    # append the predicted class to the list y_hats
    y_hats.append(y_hat_i)

  # error is the average of the absolute values of the differences between y_hats and test_y
  error = np.mean(abs(y_hats - test_y))
  accuracy = 1 - error

  return accuracy

print("Naive bayes accuracy = %0.4f" %(test_naive_base(test_x, test_y, logprior, loglikelihood)))

for tweet in ['i am happy', 'i am bad', 'this movie should have been great.', 'great', 'great great', 'great great great', 'great great great great']:
  p = naive_bayes_predict(tweet, logprior, loglikelihood)
  print(f'{tweet} -> {p:.2f}')

my_tweet = 'you are not a good friend :('
naive_bayes_predict(my_tweet, logprior, loglikelihood)

def get_ratio(freqs, word):
  '''
    Input:
        freqs: dictionary containing the words

    Output: a dictionary with keys 'positive', 'negative', and 'ratio'.
        Example: {'positive': 10, 'negative': 20, 'ratio': 0.5}
  '''
  pos_neg_ratio = {'positive':0, 'negative':0, 'ratio':0.0}
  # use lookup() to find positive counts for the word (denoted by the integer 1)
  pos_neg_ratio['positive'] = lookup(freqs, word, 1)

  # use lookup() to find negative counts for the word (denoted by integer 0)
  pos_neg_ratio['negative'] = lookup(freqs, word, 0)

  # calculate the ratio of positive to negative counts for the word
  pos_neg_ratio['ratio'] = (pos_neg_ratio['positive'] + 1) / (pos_neg_ratio['negative'] + 1)

  return pos_neg_ratio

get_ratio(freqs, 'happi')

def get_words_by_threshold(freqs, label, threshold, get_ratio=get_ratio):
  '''
    Input:
        freqs: dictionary of words
        label: 1 for positive, 0 for negative
        threshold: ratio that will be used as the cutoff for including a word in the returned dictionary
    Output:
        word_list: dictionary containing the word and information on its positive count, negative count, and ratio of positive to negative counts.
        example of a key value pair:
        {'happi':
            {'positive': 10, 'negative': 20, 'ratio': 0.5}
        }
  '''
  word_list = {}
  for key in freqs:
    word, _ = key
    pos_neg_ratio = get_ratio(freqs, word)
    if label == 1 and pos_neg_ratio['ratio'] >= threshold:
      word_list[word] = pos_neg_ratio
    elif label == 0 and pos_neg_ratio['ratio'] <= threshold:
      word_list[word] = pos_neg_ratio

  return word_list

get_words_by_threshold(freqs, label=0, threshold=0.05)

get_words_by_threshold(freqs, label=1, threshold=10)

print('Truth Predicted Tweet')
for x, y in zip(test_x, test_y):
  y_hat = naive_bayes_predict(x, logprior, loglikelihood)
  if y != (np.sign(y_hat) >0):
    print('%d\t%0.2f\t%s' % (y, np.sign(y_hat) > 0, ' '.join(process_tweet(x)).encode('ascii', 'ignore')))

arr = ['eee', 'rrr', 'tttt']
print(' '.join(arr))

# Test with your own tweet - feel free to modify `my_tweet`
my_tweet = 'I am happy because I am learning :)'
p = naive_bayes_predict(my_tweet, logprior, loglikelihood)
print(p)

